Highcharts.setOptions({lang:{thousandsSep:",",numericSymbols:[null,"M","G","T","P","E"]}});let chartIdWealthGap6=document.getElementById("chart-container-wealth-gap-6");function drawHighcharts(){Highcharts.chart(chartIdWealthGap6,{chart:{type:"bar",styledMode:!0,spacingBottom:25,spacingRight:100,spacingLeft:2,spacingTop:20},title:{text:null},data:{googleSpreadsheetKey:"1TBI9FgQy-F1EQkL0ntgDz7UvHQCVubvVOZB8d1fDqqs",googleSpreadsheetWorksheet:6},plotOptions:{series:{groupPadding:.1,dataLabels:{enabled:!0,format:"{y:,.0f}%"}}},legend:{enabled:!1},xAxis:{labels:{style:{whiteSpace:"nowrap"}},tickLength:5},yAxis:{visible:!1},credits:{enabled:!1},tooltip:{enabled:!1},responsive:{rules:[{condition:{maxWidth:500},chartOptions:{chart:{spacingRight:10},yAxis:{tickAmount:4},legend:{align:"left",x:-8},tooltip:{enabled:!1}}}]}})}setTimeout(function(){if(""===chartIdWealthGap6.innerHTML){let e=document.getElementsByClassName("chart-area-wealth-gap-6");for(var t=0;t<e.length;t++)e[t].style.display="none";document.getElementById("chart-fallback").innerHTML+='<img src="https://fm-static.cnbc.com/awsmedia/chart/2019/10/08/chart-error_wide.1570569331252.png" style="width: 100%;max-width:660px">'}},500),"complete"===document.readyState||"interactive"===document.readyState?drawHighcharts():document.addEventListener("DOMContentLoaded",drawHighcharts);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiSGlnaGNoYXJ0cyIsInNldE9wdGlvbnMiLCJsYW5nIiwidGhvdXNhbmRzU2VwIiwibnVtZXJpY1N5bWJvbHMiLCJjaGFydElkV2VhbHRoR2FwNiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkcmF3SGlnaGNoYXJ0cyIsImNoYXJ0IiwidHlwZSIsInN0eWxlZE1vZGUiLCJzcGFjaW5nQm90dG9tIiwic3BhY2luZ1JpZ2h0Iiwic3BhY2luZ0xlZnQiLCJzcGFjaW5nVG9wIiwidGl0bGUiLCJ0ZXh0IiwiZGF0YSIsImdvb2dsZVNwcmVhZHNoZWV0S2V5IiwiZ29vZ2xlU3ByZWFkc2hlZXRXb3Jrc2hlZXQiLCJwbG90T3B0aW9ucyIsInNlcmllcyIsImdyb3VwUGFkZGluZyIsImRhdGFMYWJlbHMiLCJlbmFibGVkIiwiZm9ybWF0IiwibGVnZW5kIiwieEF4aXMiLCJsYWJlbHMiLCJzdHlsZSIsIndoaXRlU3BhY2UiLCJ0aWNrTGVuZ3RoIiwieUF4aXMiLCJ2aXNpYmxlIiwiY3JlZGl0cyIsInRvb2x0aXAiLCJyZXNwb25zaXZlIiwicnVsZXMiLCJjb25kaXRpb24iLCJtYXhXaWR0aCIsImNoYXJ0T3B0aW9ucyIsInRpY2tBbW91bnQiLCJhbGlnbiIsIngiLCJzZXRUaW1lb3V0IiwiaW5uZXJIVE1MIiwiY2hhcnRBcmVhIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImkiLCJsZW5ndGgiLCJkaXNwbGF5IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiJBQVFBQSxXQUFBQyxXQUFBLENBQ0FDLEtBQUEsQ0FDQUMsYUFBQSxJQUNBQyxlQUFBLENBQUEsS0FBQSxJQUFBLElBQUEsSUFBQSxJQUFBLFFBSUEsSUFBQUMsa0JBQUFDLFNBQUFDLGVBQUEsZ0NBaUJBLFNBQUFDLGlCQUNBUixXQUFBUyxNQUFBSixrQkFBQSxDQUNBSSxNQUFBLENBQ0FDLEtBQUEsTUFDQUMsWUFBQSxFQUNBQyxjQUFBLEdBQ0FDLGFBQUEsSUFDQUMsWUFBQSxFQUNBQyxXQUFBLElBRUFDLE1BQUEsQ0FDQUMsS0FBQSxNQUVBQyxLQUFBLENBQ0FDLHFCQUFBLCtDQUNBQywyQkFBQSxHQUdBQyxZQUFBLENBQ0FDLE9BQUEsQ0FDQUMsYUFBQSxHQUNBQyxXQUFBLENBQ0FDLFNBQUEsRUFDQUMsT0FBQSxlQXFCQUMsT0FBQSxDQU1BRixTQUFBLEdBRUFHLE1BQUEsQ0FDQUMsT0FBQSxDQUNBQyxNQUFBLENBQ0FDLFdBQUEsV0FHQUMsV0FBQSxHQU9BQyxNQUFBLENBQ0FDLFNBQUEsR0FXQUMsUUFBQSxDQUNBVixTQUFBLEdBRUFXLFFBQUEsQ0FDQVgsU0FBQSxHQUVBWSxXQUFBLENBQ0FDLE1BQUEsQ0FBQSxDQUNBQyxVQUFBLENBQ0FDLFNBQUEsS0FFQUMsYUFBQSxDQUNBaEMsTUFBQSxDQUNBSSxhQUFBLElBRUFvQixNQUFBLENBQ0FTLFdBQUEsR0FFQWYsT0FBQSxDQUNBZ0IsTUFBQSxPQUNBQyxHQUFBLEdBRUFSLFFBQUEsQ0FDQVgsU0FBQSxTQWxIQW9CLFdBQUEsV0FDQSxHQUFBLEtBQUF4QyxrQkFBQXlDLFVBQUEsQ0FFQSxJQUFBQyxFQUFBekMsU0FBQTBDLHVCQUFBLDJCQUNBLElBQUEsSUFBQUMsRUFBQSxFQUFBQSxFQUFBRixFQUFBRyxPQUFBRCxJQUNBRixFQUFBRSxHQUFBbkIsTUFBQXFCLFFBQUEsT0FHQTdDLFNBQUFDLGVBQUEsa0JBQUF1QyxXQUFBLDRJQUlBLEtBOEdBLGFBQUF4QyxTQUFBOEMsWUFBQSxnQkFBQTlDLFNBQUE4QyxXQUNBNUMsaUJBRUFGLFNBQUErQyxpQkFBQSxtQkFBQTdDIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhZGRzIHNvY2lhbCBjbGFzcyB0byBnZXQgc29jaWFsIGNoYXJ0XG4vLyBsZXQgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1hcmVhXCIpO1xuLy8gZm9yKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspXG4vLyB7XG4vLyAgICAgZWxlbWVudFtpXS5jbGFzc05hbWUgKz0gXCIgc29jaWFsXCI7XG4vLyB9XG5cblxuSGlnaGNoYXJ0cy5zZXRPcHRpb25zKHtcbiAgICBsYW5nOiB7XG4gICAgICB0aG91c2FuZHNTZXA6ICcsJyxcbiAgICAgIG51bWVyaWNTeW1ib2xzOiBbbnVsbCwgJ00nLCAnRycsICdUJywgJ1AnLCAnRSddXG4gICAgfVxufSk7XG5cbmxldCBjaGFydElkV2VhbHRoR2FwNiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hhcnQtY29udGFpbmVyLXdlYWx0aC1nYXAtNlwiKVxuXG4vLyBjaGVja3MgZm9yIHRoZSBjaGFydCBJRCBhbmQgZGlzcGxheXMgYSBiYWNrdXAgaW1hZ2UgaWYgdGhlIGJyb3dzZXIgY2FuJ3QgZmluZCBpdFxuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBpZihjaGFydElkV2VhbHRoR2FwNi5pbm5lckhUTUwgPT09IFwiXCIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ25vSWQnKTtcbiAgICAgICAgbGV0IGNoYXJ0QXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjaGFydC1hcmVhLXdlYWx0aC1nYXAtNlwiKTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNoYXJ0QXJlYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hhcnRBcmVhW2ldLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfSBcbiAgICAgICAgLy8gaW5zZXJ0IGNoYXJ0IHNjcmVlbnNob3QgaGVyZVxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNoYXJ0LWZhbGxiYWNrXCIpLmlubmVySFRNTCArPSAnPGltZyBzcmM9XCJodHRwczovL2ZtLXN0YXRpYy5jbmJjLmNvbS9hd3NtZWRpYS9jaGFydC8yMDE5LzEwLzA4L2NoYXJ0LWVycm9yX3dpZGUuMTU3MDU2OTMzMTI1Mi5wbmdcIiBzdHlsZT1cIndpZHRoOiAxMDAlO21heC13aWR0aDo2NjBweFwiPic7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3llc0lkJylcbiAgICB9XG59LDUwMCk7XG5cbmZ1bmN0aW9uIGRyYXdIaWdoY2hhcnRzKCkge1xuICAgIEhpZ2hjaGFydHMuY2hhcnQoY2hhcnRJZFdlYWx0aEdhcDYsIHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgc3R5bGVkTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHNwYWNpbmdCb3R0b206IDI1LFxuICAgICAgICAgICAgc3BhY2luZ1JpZ2h0OiAxMDAsXG4gICAgICAgICAgICBzcGFjaW5nTGVmdDogMixcbiAgICAgICAgICAgIHNwYWNpbmdUb3A6IDIwXG4gICAgICAgIH0sIFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgdGV4dDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBnb29nbGVTcHJlYWRzaGVldEtleTogJzFUQkk5RmdReS1GMUVRa0wwbnRnRHo3VXZIUUNWdWJ2Vk9aQjhkMWZEcXFzJyxcbiAgICAgICAgICAgIGdvb2dsZVNwcmVhZHNoZWV0V29ya3NoZWV0OiA2XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGZvciBiYXIgY2hhcnRzIG9ubHlcbiAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgIHNlcmllczoge1xuICAgICAgICAgICAgICAgIGdyb3VwUGFkZGluZzogMC4xLFxuICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBcInt5OiwuMGZ9JVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBcbiAgICAgICAgfSxcbiAgICAgICAgLy8gZm9yIGxpbmUgY2hhcnRzIG9ubHlcbiAgICAgICAgLy8gcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgLy8gICAgIHNlcmllczoge1xuICAgICAgICAvLyAgICAgICAgIGxpbmVXaWR0aDogMSxcbiAgICAgICAgLy8gICAgICAgICAvLyBjbGlwOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBtYXJrZXI6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgICAgIHN5bWJvbDogJ2NpcmNsZScsXG4gICAgICAgIC8vICAgICAgICAgICAgIGZpbGxDb2xvcjogJyNmZmZmZmYnLFxuICAgICAgICAvLyAgICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZmZmZidcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAvLyBhbGlnbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgIC8vIHN5bWJvbFJhZGl1czogMCxcbiAgICAgICAgICAgIC8vIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgICAgICAgLy8geDogMCxcbiAgICAgICAgICAgIC8vIGl0ZW1NYXJnaW5Ub3A6IC0xMFxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgeEF4aXM6IHtcbiAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpY2tMZW5ndGg6IDUsXG4gICAgICAgICAgICAvLyBlZGl0cyB4QXhpcyB0aWNrc1xuICAgICAgICAgICAgLy8gZGF0ZVRpbWVMYWJlbEZvcm1hdHM6IHtcbiAgICAgICAgICAgIC8vICAgICB3ZWVrOiAnJWIuICVlJyxcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyB0aWNrSW50ZXJ2YWw6IDI0ICogMzYwMCAqIDEwMDAgKiA3XG4gICAgICAgIH0sXG4gICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIHRpdGxlOiBmYWxzZSxcbiAgICAgICAgICAgIC8vIGxhYmVsczoge1xuICAgICAgICAgICAgLy8gICAgIHVzZUhUTUw6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgb3ZlcmZsb3c6ICdhbGxvdydcbiAgICAgICAgICAgIC8vIH0sXG4gICAgICAgICAgICAvLyBhZGRzIGNvbW1hcyB0byB0aG91c2FuZHNcbiAgICAgICAgICAgIC8vIGZvcm1hdHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gICAgIHJldHVybiBIaWdoY2hhcnRzLm51bWJlckZvcm1hdCh0aGlzLnZhbHVlLDAsJy4nLCcsJyk7XG4gICAgICAgICAgICAvLyB9LFxuICAgICAgICB9LFxuICAgICAgICBjcmVkaXRzOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICByZXNwb25zaXZlOiB7XG4gICAgICAgICAgICBydWxlczogW3tcbiAgICAgICAgICAgIGNvbmRpdGlvbjoge1xuICAgICAgICAgICAgICAgIG1heFdpZHRoOiA1MDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFydE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIHNwYWNpbmdSaWdodDogMTBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHlBeGlzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2tBbW91bnQ6IDRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICBhbGlnbjogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICB4OiAtOFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJyB8fCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnKSB7XG4gICAgZHJhd0hpZ2hjaGFydHMoKTtcbn0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZHJhd0hpZ2hjaGFydHMpO1xufSJdfQ==
